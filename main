import numpy as np
import time
import os

def print_grid(grid):
    os.system('cls' if os.name == 'nt' else 'clear')
    for row in grid:
        print(" ".join("â–ˆ" if cell else " " for cell in row))

def update_grid(grid):
    rows, cols = grid.shape
    new_grid = np.zeros((rows, cols), dtype=int)

    for row in range(rows):
        for col in range(cols):
            # Count alive neighbors
            neighbors = sum(
                grid[i % rows][j % cols]
                for i in range(row - 1, row + 2)
                for j in range(col - 1, col + 2)
            ) - grid[row][col]

            # Apply rules
            if grid[row][col] == 1 and (neighbors == 2 or neighbors == 3):
                new_grid[row][col] = 1
            elif grid[row][col] == 0 and neighbors == 3:
                new_grid[row][col] = 1

    return new_grid

def game_of_life(rows=20, cols=20, iterations=100):
    # Initialize random grid
    grid = np.random.choice([0, 1], size=(rows, cols))

    for _ in range(iterations):
        print_grid(grid)
        grid = update_grid(grid)
        time.sleep(0.5)

if name == "main":
    game_of_life()
